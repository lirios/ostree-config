#!/bin/bash

command -v getarg >/dev/null || . /usr/lib/dracut-lib.sh

UNIT_DIR="$1"
if [ -z "${UNIT_DIR}" ]; then
    echo "$0: missing argument"
    exit 1
fi
[ -d "${UNIT_DIR}" ] || mkdir -p "${UNIT_DIR}"

add_requires() {
    local name="$1"
    local requires_dir="${UNIT_DIR}/initrd-root-fs.target.requires"
    mkdir -p "${requires_dir}"
    ln -sf "../${name}" "${requires_dir}/${name}"
}

if getargbool 0 rd.live.debug -n -y rdlivedebug; then
    exec > /tmp/liveroot.$$.out
    exec 2>> /tmp/liveroot.$$.out
    set -x
fi

if ! getargbool 0 rd.live.image; then
    echo "$0: skipping due to missing rd.live.image argument"
    exit 0
fi

live_dir=$(getarg rd.live.dir -d live_dir)
[ -z "$live_dir" ] && live_dir="LiveOS"
squash_image=$(getarg rd.live.squashimg)
[ -z "$squash_image" ] && squash_image="squashfs.img"

iso_label=$(getarg oic.live.label)
if [ -z "$iso_label" ]; then
    echo "$0: missing oic.live.label argument, cannot continue!"
    exit 1
fi

# Create stamp file that everything else should use to detect a live boot
> /run/ostree-live

# MD5 check
cdrom_devname=$(dev_unit_name "/dev/disk/by-label/${iso_label}")
cat > "${UNIT_DIR}/checkisomd5.service" <<EOF
[Unit]
Description=Media check on ${cdrom_devname}
DefaultDependencies=no
Before=shutdown.target
ConditionKernelCommandLine=rd.live.check

[Service]
Type=oneshot
RemainAfterExit=no
ExecStartPre=-/bin/plymouth hide-splash
ExecStart=/bin/checkisomd5 --verbose ${cdrom_devname}
ExecStartPost=-/bin/plymouth show-splash
StandardInput=tty-force
StandardOutput=inherit
StandardError=inherit
TimeoutSec=0
SuccessExitStatus=2
EOF

# Install mount units
add_requires sysroot.mount
add_requires sysroot-var.mount

# Mount ISO image
cat > "${UNIT_DIR}/run-initramfs-live.mount" <<EOF
# Automatically generated by ostree-live-generator

[Unit]
DefaultDependencies=false

[Mount]
What=/dev/disk/by-label/${iso_label}
Where=/run/initramfs/live
Type=iso9660
EOF

# Mount /sysroot
cat > "${UNIT_DIR}/sysroot.mount" <<EOF
# Automatically generated by ostree-live-generator

[Unit]
DefaultDependencies=false
Before=initrd-root-fs.target
Requires=run-initramfs-live.mount

[Mount]
What=/run/initramfs/live/${live_dir}/${squash_image}
Where=/sysroot
Type=squashfs
EOF

# Add ostree= to the kernel command line before ostree-prepare-root
mkdir -p "${UNIT_DIR}/ostree-prepare-root.service.d"
cat > "${UNIT_DIR}/ostree-prepare-root.service.d/10-live.conf" <<EOF
# Automatically generated by ostree-live-generator

[Unit]
# The base unit conditions on the ostree karg, which won't exist until
# ExecStartPre runs
ConditionKernelCommandLine=

[Service]
ExecStartPre=/usr/sbin/ostree-cmdline start
ExecStartPost=/usr/sbin/ostree-cmdline stop
EOF

# Writable area
cat > "${UNIT_DIR}/writable.mount" <<EOF
# Automatically generated by ostree-live-generator

[Unit]
DefaultDependencies=false
Requires=ostree-live-populate-writable.service
Before=ostree-live-populate-writable.service

[Mount]
What=tmpfs
Where=/writable
Type=tmpfs
Options=mode=0700
EOF

# Store /sysroot/var in the /writable tmpfs
cat > "${UNIT_DIR}/sysroot-var.mount" <<EOF
# Automatically generated by ostree-live-generator

[Unit]
DefaultDependencies=false

# Make sure /sysroot is mounted first, since we're mounting under there
Requires=initrd-root-fs.target
After=initrd-root-fs.target

# Make sure our tmpfs is available
RequiresMountsFor=/writable

[Mount]
What=/writable/var
Where=/sysroot/var
Type=none
Options=bind
EOF

#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import traceback

progname = os.path.basename(sys.argv[0])

parser = argparse.ArgumentParser(prog=progname)
parser.add_argument('--basearch', required=True, help='architecture')
parser.add_argument('--channel', required=True, help='channel')
parser.add_argument('--variant', required=True, help='variant')
parser.add_argument('--prod-url', required=True, help='production repository URL')
parser.add_argument('--dev-repo', required=True, help='development repository path')
parser.add_argument('--prod-repo', required=True, help='production repository path')

args = parser.parse_args()

if args.prod_url.endswith('/') is False:
    args.prod_url += '/'
if args.prod_repo.endswith('/') is False:
    args.prod_repo += '/'
if args.dev_repo.endswith('/') is False:
    args.dev_repo += '/'

branch_name = "lirios/%s/%s/%s" % (args.channel, args.basearch, args.variant)

rsync_args = '-e ' + os.environ['RSYNC_SSH_COMMAND']

# Copy production repository here
subprocess.run(['rsync', '-az', '--delete', rsync_args, args.prod_url, args.prod_repo], check=True)

# Copy development repository from the production one
subprocess.run(['rsync', '-az', '--delete', args.prod_repo, args.dev_repo], check=True)

# Build a new tree
subprocess.run(['rpm-ostree', 'compose', 'tree', '--force-nocache', '--repo=' + args.dev_repo, 'lirios-%s-%s.yaml' % (args.channel, args.variant)], check=True)

# Publish
subprocess.run(['ostree', '--repo=' + args.prod_repo, 'pull-local', args.dev_repo, branch_name], check=True)
subprocess.run(['ostree', '--repo=' + args.prod_repo, 'static-delta', 'generate', branch_name], check=True)
subprocess.run(['ostree', '--repo=' + args.prod_repo, 'summary', '-u'], check=True)
subprocess.run(['./rsync-repos', '--rsync-opt=' + rsync_args, '--src=' + args.prod_repo, '--dest=' + args.prod_url], check=True)
